import apiService from "../services/ApiServices";

const helpers = {};

helpers.getTokenFromUrl = () => {
  return window.location.hash.substring(1).split('&').reduce((initial, item) => {
    let parts = item.split('=')
    initial[parts[0]] = decodeURIComponent(parts[1]);
    return initial;
  }, {});
}

helpers.playlist = {};

helpers.playlist.populate = async (lineUp, removedArtists, playlistURIs) => {
  for (let i = 0; i < lineUp.length; i++) {
    if (!removedArtists.includes(i)) {
      setTimeout(() => {
        apiService.getArtist(lineUp[i].name, (data) => {
          console.log(data);
          apiService.getArtistTracks(data.id, (data) => {
            data.forEach(track => playlistURIs.push(track.uri));
          });
        })
        // setPercentLoaded(i / (lineUp.length - 1));
      }, i * 200)
    }
  }
}
  
helpers.playlist.create = async (festival, playlistURIs) => {
  const userId = await apiService.getUserId();
  const playlistId = await apiService.createPlaylist(userId, festival.name, `${festival.name} 2024 playlist generated by Festify`);
  apiService.addTracksToPlaylist(playlistId, playlistURIs);
}

helpers.formatNumber = (num) => {
  return Math.abs(Number(num)) >= 1.0e+9
       ? Math.round(Math.abs(Number(num)) / 1.0e+9 * 10) / 10 + " Billion"
       : Math.abs(Number(num)) >= 1.0e+6
       ? Math.round(Math.abs(Number(num)) / 1.0e+6 * 10) / 10 + " Million"
       : Math.abs(Number(num)) >= 1.0e+3
       ? Math.round(Math.abs(Number(num)) / 1.0e+3) + " Thousand"
       : Math.abs(Number(num));
   }

export default helpers;