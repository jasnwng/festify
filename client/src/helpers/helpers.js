import apiService from "../services/ApiServices";

const helpers = {};

helpers.getTokenFromUrl = () => {
  return window.location.hash.substring(1).split('&').reduce((initial, item) => {
    let parts = item.split('=')
    initial[parts[0]] = decodeURIComponent(parts[1]);
    return initial;
  }, {});
}

helpers.playlist = {};

helpers.playlist.populate = async (lineUp, removedArtists) => {
  try {
    const selectedArtists = lineUp.filter((artist, i) => !removedArtists.includes(i));
    const tracksNested = await Promise.all(selectedArtists.map(async (artist, i) => {
      return new Promise((res, rej) => {
        setTimeout(() => {
          apiService.getArtist(artist.name, (data) => {
            apiService.getArtistTracks(data.id, (data) => {
              let arr = [];
              data.forEach(track => arr.push(track.uri));
              res(arr);
            });
          })
        }, 200 * i)
      })
    }))
    const tracks = [];
    tracksNested.forEach((arr)=>tracks.push(...arr))
    console.log(tracks)

    return tracks;
  } catch (error) {
    return new Promise((res, rej) => {
      res(null)
    })
  }
}
  
helpers.playlist.create = async (festival, playlistURIs) => {
  const userId = await apiService.getUserId();
  const playlist = await apiService.createPlaylist(userId, festival.name, `${festival.name} 2024 playlist generated by Festify`);
  apiService.addTracksToPlaylist(playlist.id, playlistURIs);
  return playlist;
}

helpers.formatNumber = (num) => {
  return Math.abs(Number(num)) >= 1.0e+9
       ? Math.round(Math.abs(Number(num)) / 1.0e+9 * 10) / 10 + " Billion"
       : Math.abs(Number(num)) >= 1.0e+6
       ? Math.round(Math.abs(Number(num)) / 1.0e+6 * 10) / 10 + " Million"
       : Math.abs(Number(num)) >= 1.0e+3
       ? Math.round(Math.abs(Number(num)) / 1.0e+3) + " Thousand"
       : Math.abs(Number(num));
   }

export default helpers;